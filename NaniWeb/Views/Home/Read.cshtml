@using NaniWeb.Data
@inject SettingsKeeper SettingsKeeper

@{
    var series = (Series) ViewData["Series"];
    var seriesList = (Series[]) ViewData["SeriesList"];
    var chapters = (Chapter[]) ViewData["Chapters"];
    var chapter = (Chapter) ViewData["Chapter"];
    var pages = (Page[]) ViewData["Pages"];
    var lastPage = pages.Last();
    var nextChapter = ViewData["NextChapter"] as Chapter;
    var readerMode = (Series.SeriesType) ViewData["ReaderMode"];
    ViewData["Title"] = $"Chapter {chapter.ChapterNumber} - {series.Name}";
    ViewData["DisqusUrl"] = $"{SettingsKeeper.GetSetting("SiteUrl").Value}{Url.Action("Project", new {urlSlug = series.UrlSlug, chapterNumber = chapter.ChapterNumber})}";
    ViewData["DisqusIdentifier"] = $"series_{series.UrlSlug}_chapter_{chapter.ChapterNumber}";
    ViewData["DisqusTitle"] = $"Chapter {chapter.ChapterNumber} - {series.Name} - {SettingsKeeper.GetSetting("SiteName").Value}";
}

@section Header
{
    <partial name="_GoogleAnalytics"/>
    
    @if (readerMode == Series.SeriesType.Webtoon)
    {
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css" integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous">
    }
}

<partial name="_HomeNav"/>

<div id="top" class="container my-2 border border-light rounded">
    @if (readerMode == Series.SeriesType.Manga)
    {
        <div class="row">
            <div class="col-md-4 my-1 px-1">
                <select id="series_selector" class="custom-select">
                    @foreach (var srs in seriesList)
                    {
                        <option value="@Url.Action("Project", new {urlSlug = srs.UrlSlug, chapterNumber = string.Empty})" selected="@(srs == series ? "selected" : null)">@srs.Name</option>
                    }
                </select>
            </div>
            <div class="col-md-4 my-1 px-1">
                <select id="chapter_selector" class="custom-select">
                    @foreach (var chap in chapters)
                    {
                        <option value="@Url.Action("Project", new {urlSlug = series.UrlSlug, chapterNumber = chap.ChapterNumber})" selected="@(chap == chapter ? "selected" : null)">@(chap.Volume > 0 ? $"Vol. {chap.Volume} " : string.Empty)Ch. @(chap.ChapterNumber)@(string.IsNullOrEmpty(chap.Name) ? string.Empty : $" - {chap.Name}")</option>
                    }
                </select>
            </div>
            <div class="col-md-4 my-1 px-1 d-inline-flex flex-nowrap">
                <select id="page_selector" class="custom-select mw-50 w-100 mr-3">
                    @foreach (var chPage in pages)
                    {
                        <option value="@chPage.PageNumber">Page @(chPage.PageNumber + 1)</option>
                    }
                </select>
                <select id="mode_selector" class="custom-select mw-50 w-100">
                    @foreach (var mode in Enum.GetNames(typeof(Series.SeriesType)))
                    {
                        <option value="@Url.Action("Project", new {urlSlug = series.UrlSlug, chapterNumber = chapter.ChapterNumber, mode})" selected="@(mode == readerMode.ToString() ? "selected" : null)">@(mode == Series.SeriesType.Manga.ToString() ? "Single Page" : "Long Strip")</option>
                    }
                </select>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-sm-5 my-1 px-1">
                <select id="series_selector" class="custom-select w-100">
                    @foreach (var srs in seriesList)
                    {
                        <option value="@Url.Action("Project", new {urlSlug = srs.UrlSlug, chapterNumber = string.Empty})" selected="@(srs == series ? "selected" : null)">@srs.Name</option>
                    }
                </select>
            </div>
            <div class="col-sm-5 my-1 px-1">
                <select id="chapter_selector" class="custom-select w-100">
                    @foreach (var chap in chapters)
                    {
                        <option value="@Url.Action("Project", new {urlSlug = series.UrlSlug, chapterNumber = chap.ChapterNumber})" selected="@(chap == chapter ? "selected" : null)">@(chap.Volume > 0 ? $"Vol. {chap.Volume} " : string.Empty)Ch. @(chap.ChapterNumber)@(string.IsNullOrEmpty(chap.Name) ? string.Empty : $" - {chap.Name}")</option>
                    }
                </select>
            </div>
            <div class="col-sm-2 my-1 px-1">
                <select id="mode_selector" class="custom-select w-100">
                    @foreach (var mode in Enum.GetNames(typeof(Series.SeriesType)))
                    {
                        <option value="@Url.Action("Project", new {urlSlug = series.UrlSlug, chapterNumber = chapter.ChapterNumber, mode})" selected="@(mode == readerMode.ToString() ? "selected" : null)">@(mode == Series.SeriesType.Manga.ToString() ? "Single page" : "Long strip")</option>
                    }
                </select>
            </div>
        </div>
    }
</div>
<div id="pages" class="container my-2 p-0 mw-100">

    @if (readerMode == Series.SeriesType.Manga)
    {
        <img id="manga_page" class="img-fluid mx-auto d-block clickable" src="~/images/pages/@($"{pages[0].Id}.png")" alt="">
    }
    else
    {
        foreach (var chPage in pages)
        {
            <img class="img-fluid mx-auto d-block @(series.Type == Series.SeriesType.Manga ? "my-2" : string.Empty)" src="~/images/pages/@($"{chPage.Id}.png")" alt=""/>
        }
    }
</div>
<div id="bottom" class="container my-2 rounded border border-secondary disqus-container">
    <partial name="_DisqusDiv"/>
</div>

@if (readerMode == Series.SeriesType.Webtoon)
{
    <div>
        <a class="to-top btn btn-lg btn-dark text-white fas fa-chevron-up" id="to_top"href="#"></a>
    </div>
}

@section Body
{
    <partial name="_DisqusScript"/>

    <script>
        $("#projects").addClass("active");

        $("#series_selector,#mode_selector,#chapter_selector").change(function() {
            window.location = this.value;
        });
    </script>

    @if (readerMode == Series.SeriesType.Manga)
    {
        <script>
            $("#bottom").addClass("d-none");

            const nextAddress =
                "@Html.Raw(chapter == chapters.First() ? Url.Action("Project", new {urlSlug = series.UrlSlug, chapterNumber = string.Empty}) : Url.Action("Project", new {urlSlug = series.UrlSlug, chapterNumber = nextChapter?.ChapterNumber}))";
            const page = $("#manga_page");
            var index = 0;

            const pages = [
                @foreach (var chPage in pages)
                {
                    @Html.Raw($"\"/images/pages/{chPage.Id}.png\"{(chPage == lastPage ? string.Empty : ",")}")
                }
            ];

            var loadedPages = [(new Image()).src = pages[index]];

            function previous() {
                if (index > 0) {
                    index--;
                    blur();
                    page.attr("src", loadedPages[index]);
                    $('#page_selector').val(index);
                    scrollToTop();
                }
            };

            function next() {
                if (index < pages.length - 1) {
                    index++;
                    blur();
                    page.attr("src", loadedPages[index]);
                    $('#page_selector').val(index);
                    scrollToTop();
                    preload();
                    
                    if (index === pages.length - 1) {
                        $("#bottom").removeClass("d-none");
                    }
                } else {
                    window.location = nextAddress;
                }
            };

            function blur() {
                const img = $("#manga_page");

                img.addClass("blur");
            };

            function removeBlur() {
                const img = $("#manga_page");

                img.removeClass("blur");
            }

            function scrollToTop() {
                window.scrollTo(0, 0);
            }

            function preload() {
                for (var i = 0; i < 2; i++) {
                    if (loadedPages.length + 1 <= pages.length) {
                        loadedPages.push((new Image()).src = pages[loadedPages.length]);
                    }
                }
            }

            $(function() {
                preload();
            });

            $("#pages").click(function(e) {
                const pWidth = $(this).innerWidth();
                const pOffset = $(this).offset();
                const x = e.pageX - pOffset.left;
                if (pWidth / 2 > x)
                    previous();
                else
                    next();
            });

            $("#manga_page").on("load",
                function() {
                    removeBlur();
                });

            $("#page_selector").change(function() {
                index = this.value;
                page.attr("src", pages[index]);

                if (index === pages.length - 1) {
                    $("#bottom").removeClass("d-none");
                }
            });
        </script>
    }
}